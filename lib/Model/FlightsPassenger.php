<?php
/**
 * FlightsPassenger
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightsPassenger Class Doc Comment
 *
 * @category Class
 * @description Passenger information can optionally be provided. All fields are optional with the exception of the Passenger name to be rendered on the boarding pass. All passenger is treated as PII and encrypted at rest. Passenger information is deleted or rendered unusable once the pass record has invalidated.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightsPassenger implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'flightsPassenger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'passenger_details' => '\Swagger\Client\Model\IoPerson',
'frequent_flyer_info' => '\Swagger\Client\Model\FlightsFrequentFlyerInfo',
'identity_details' => '\Swagger\Client\Model\FlightsIdentityDetails',
'with_infant' => 'bool',
'infant_details' => '\Swagger\Client\Model\FlightsInfant',
'known_traveler_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'passenger_details' => null,
'frequent_flyer_info' => null,
'identity_details' => null,
'with_infant' => null,
'infant_details' => null,
'known_traveler_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'passenger_details' => 'passengerDetails',
'frequent_flyer_info' => 'frequentFlyerInfo',
'identity_details' => 'identityDetails',
'with_infant' => 'withInfant',
'infant_details' => 'infantDetails',
'known_traveler_number' => 'knownTravelerNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'passenger_details' => 'setPassengerDetails',
'frequent_flyer_info' => 'setFrequentFlyerInfo',
'identity_details' => 'setIdentityDetails',
'with_infant' => 'setWithInfant',
'infant_details' => 'setInfantDetails',
'known_traveler_number' => 'setKnownTravelerNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'passenger_details' => 'getPassengerDetails',
'frequent_flyer_info' => 'getFrequentFlyerInfo',
'identity_details' => 'getIdentityDetails',
'with_infant' => 'getWithInfant',
'infant_details' => 'getInfantDetails',
'known_traveler_number' => 'getKnownTravelerNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['passenger_details'] = isset($data['passenger_details']) ? $data['passenger_details'] : null;
        $this->container['frequent_flyer_info'] = isset($data['frequent_flyer_info']) ? $data['frequent_flyer_info'] : null;
        $this->container['identity_details'] = isset($data['identity_details']) ? $data['identity_details'] : null;
        $this->container['with_infant'] = isset($data['with_infant']) ? $data['with_infant'] : null;
        $this->container['infant_details'] = isset($data['infant_details']) ? $data['infant_details'] : null;
        $this->container['known_traveler_number'] = isset($data['known_traveler_number']) ? $data['known_traveler_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['passenger_details'] === null) {
            $invalidProperties[] = "'passenger_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets passenger_details
     *
     * @return \Swagger\Client\Model\IoPerson
     */
    public function getPassengerDetails()
    {
        return $this->container['passenger_details'];
    }

    /**
     * Sets passenger_details
     *
     * @param \Swagger\Client\Model\IoPerson $passenger_details passenger_details
     *
     * @return $this
     */
    public function setPassengerDetails($passenger_details)
    {
        $this->container['passenger_details'] = $passenger_details;

        return $this;
    }

    /**
     * Gets frequent_flyer_info
     *
     * @return \Swagger\Client\Model\FlightsFrequentFlyerInfo
     */
    public function getFrequentFlyerInfo()
    {
        return $this->container['frequent_flyer_info'];
    }

    /**
     * Sets frequent_flyer_info
     *
     * @param \Swagger\Client\Model\FlightsFrequentFlyerInfo $frequent_flyer_info frequent_flyer_info
     *
     * @return $this
     */
    public function setFrequentFlyerInfo($frequent_flyer_info)
    {
        $this->container['frequent_flyer_info'] = $frequent_flyer_info;

        return $this;
    }

    /**
     * Gets identity_details
     *
     * @return \Swagger\Client\Model\FlightsIdentityDetails
     */
    public function getIdentityDetails()
    {
        return $this->container['identity_details'];
    }

    /**
     * Sets identity_details
     *
     * @param \Swagger\Client\Model\FlightsIdentityDetails $identity_details identity_details
     *
     * @return $this
     */
    public function setIdentityDetails($identity_details)
    {
        $this->container['identity_details'] = $identity_details;

        return $this;
    }

    /**
     * Gets with_infant
     *
     * @return bool
     */
    public function getWithInfant()
    {
        return $this->container['with_infant'];
    }

    /**
     * Sets with_infant
     *
     * @param bool $with_infant If the passenger is travelling with an infant under 2 years old, not occupying a seat, set to true.
     *
     * @return $this
     */
    public function setWithInfant($with_infant)
    {
        $this->container['with_infant'] = $with_infant;

        return $this;
    }

    /**
     * Gets infant_details
     *
     * @return \Swagger\Client\Model\FlightsInfant
     */
    public function getInfantDetails()
    {
        return $this->container['infant_details'];
    }

    /**
     * Sets infant_details
     *
     * @param \Swagger\Client\Model\FlightsInfant $infant_details infant_details
     *
     * @return $this
     */
    public function setInfantDetails($infant_details)
    {
        $this->container['infant_details'] = $infant_details;

        return $this;
    }

    /**
     * Gets known_traveler_number
     *
     * @return string
     */
    public function getKnownTravelerNumber()
    {
        return $this->container['known_traveler_number'];
    }

    /**
     * Sets known_traveler_number
     *
     * @param string $known_traveler_number If a passenger has a Known Traveler Number (KTN) or trusted traveler number, record it here.
     *
     * @return $this
     */
    public function setKnownTravelerNumber($known_traveler_number)
    {
        $this->container['known_traveler_number'] = $known_traveler_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
