<?php
/**
 * IoMetrics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IoMetrics Class Doc Comment
 *
 * @category Class
 * @description Metrics list issued, installed, uninstalled and invalidated counts.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoMetrics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ioMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => 'string',
'apple_wallet_installs' => 'string',
'google_pay_installs' => 'string',
'other_android_installs' => 'string',
'apple_wallet_uninstalls' => 'string',
'google_pay_uninstalls' => 'string',
'other_android_uninstalls' => 'string',
'invalidations' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'uint64',
'apple_wallet_installs' => 'uint64',
'google_pay_installs' => 'uint64',
'other_android_installs' => 'uint64',
'apple_wallet_uninstalls' => 'uint64',
'google_pay_uninstalls' => 'uint64',
'other_android_uninstalls' => 'uint64',
'invalidations' => 'uint64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
'apple_wallet_installs' => 'appleWalletInstalls',
'google_pay_installs' => 'googlePayInstalls',
'other_android_installs' => 'otherAndroidInstalls',
'apple_wallet_uninstalls' => 'appleWalletUninstalls',
'google_pay_uninstalls' => 'googlePayUninstalls',
'other_android_uninstalls' => 'otherAndroidUninstalls',
'invalidations' => 'invalidations'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
'apple_wallet_installs' => 'setAppleWalletInstalls',
'google_pay_installs' => 'setGooglePayInstalls',
'other_android_installs' => 'setOtherAndroidInstalls',
'apple_wallet_uninstalls' => 'setAppleWalletUninstalls',
'google_pay_uninstalls' => 'setGooglePayUninstalls',
'other_android_uninstalls' => 'setOtherAndroidUninstalls',
'invalidations' => 'setInvalidations'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
'apple_wallet_installs' => 'getAppleWalletInstalls',
'google_pay_installs' => 'getGooglePayInstalls',
'other_android_installs' => 'getOtherAndroidInstalls',
'apple_wallet_uninstalls' => 'getAppleWalletUninstalls',
'google_pay_uninstalls' => 'getGooglePayUninstalls',
'other_android_uninstalls' => 'getOtherAndroidUninstalls',
'invalidations' => 'getInvalidations'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['apple_wallet_installs'] = isset($data['apple_wallet_installs']) ? $data['apple_wallet_installs'] : null;
        $this->container['google_pay_installs'] = isset($data['google_pay_installs']) ? $data['google_pay_installs'] : null;
        $this->container['other_android_installs'] = isset($data['other_android_installs']) ? $data['other_android_installs'] : null;
        $this->container['apple_wallet_uninstalls'] = isset($data['apple_wallet_uninstalls']) ? $data['apple_wallet_uninstalls'] : null;
        $this->container['google_pay_uninstalls'] = isset($data['google_pay_uninstalls']) ? $data['google_pay_uninstalls'] : null;
        $this->container['other_android_uninstalls'] = isset($data['other_android_uninstalls']) ? $data['other_android_uninstalls'] : null;
        $this->container['invalidations'] = isset($data['invalidations']) ? $data['invalidations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created Pass records created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets apple_wallet_installs
     *
     * @return string
     */
    public function getAppleWalletInstalls()
    {
        return $this->container['apple_wallet_installs'];
    }

    /**
     * Sets apple_wallet_installs
     *
     * @param string $apple_wallet_installs Number of passes installed in Apple Wallet.
     *
     * @return $this
     */
    public function setAppleWalletInstalls($apple_wallet_installs)
    {
        $this->container['apple_wallet_installs'] = $apple_wallet_installs;

        return $this;
    }

    /**
     * Gets google_pay_installs
     *
     * @return string
     */
    public function getGooglePayInstalls()
    {
        return $this->container['google_pay_installs'];
    }

    /**
     * Sets google_pay_installs
     *
     * @param string $google_pay_installs Number of passes installed in Google Pay.
     *
     * @return $this
     */
    public function setGooglePayInstalls($google_pay_installs)
    {
        $this->container['google_pay_installs'] = $google_pay_installs;

        return $this;
    }

    /**
     * Gets other_android_installs
     *
     * @return string
     */
    public function getOtherAndroidInstalls()
    {
        return $this->container['other_android_installs'];
    }

    /**
     * Sets other_android_installs
     *
     * @param string $other_android_installs Number of passes installed in Android wallet apps e.g. WalletPasses.
     *
     * @return $this
     */
    public function setOtherAndroidInstalls($other_android_installs)
    {
        $this->container['other_android_installs'] = $other_android_installs;

        return $this;
    }

    /**
     * Gets apple_wallet_uninstalls
     *
     * @return string
     */
    public function getAppleWalletUninstalls()
    {
        return $this->container['apple_wallet_uninstalls'];
    }

    /**
     * Sets apple_wallet_uninstalls
     *
     * @param string $apple_wallet_uninstalls Number of passes uninstalled from Apple Wallet.
     *
     * @return $this
     */
    public function setAppleWalletUninstalls($apple_wallet_uninstalls)
    {
        $this->container['apple_wallet_uninstalls'] = $apple_wallet_uninstalls;

        return $this;
    }

    /**
     * Gets google_pay_uninstalls
     *
     * @return string
     */
    public function getGooglePayUninstalls()
    {
        return $this->container['google_pay_uninstalls'];
    }

    /**
     * Sets google_pay_uninstalls
     *
     * @param string $google_pay_uninstalls Number of passes uninstalled from Google Pay.
     *
     * @return $this
     */
    public function setGooglePayUninstalls($google_pay_uninstalls)
    {
        $this->container['google_pay_uninstalls'] = $google_pay_uninstalls;

        return $this;
    }

    /**
     * Gets other_android_uninstalls
     *
     * @return string
     */
    public function getOtherAndroidUninstalls()
    {
        return $this->container['other_android_uninstalls'];
    }

    /**
     * Sets other_android_uninstalls
     *
     * @param string $other_android_uninstalls Number of passes uninstalled from Android wallet apps e.g. WalletPasses.
     *
     * @return $this
     */
    public function setOtherAndroidUninstalls($other_android_uninstalls)
    {
        $this->container['other_android_uninstalls'] = $other_android_uninstalls;

        return $this;
    }

    /**
     * Gets invalidations
     *
     * @return string
     */
    public function getInvalidations()
    {
        return $this->container['invalidations'];
    }

    /**
     * Sets invalidations
     *
     * @param string $invalidations Number of passes invalidated.
     *
     * @return $this
     */
    public function setInvalidations($invalidations)
    {
        $this->container['invalidations'] = $invalidations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
