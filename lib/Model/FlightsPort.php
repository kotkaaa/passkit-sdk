<?php
/**
 * FlightsPort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightsPort Class Doc Comment
 *
 * @category Class
 * @description Airport records are required for each port that a carrier operates in and out of.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightsPort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'flightsPort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iata_airport_code' => 'string',
'icao_airport_code' => 'string',
'city_name' => 'string',
'localized_city_name' => '\Swagger\Client\Model\IoLocalizedString',
'airport_name' => 'string',
'localized_airport_name' => '\Swagger\Client\Model\IoLocalizedString',
'country_code' => 'string',
'timezone' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iata_airport_code' => null,
'icao_airport_code' => null,
'city_name' => null,
'localized_city_name' => null,
'airport_name' => null,
'localized_airport_name' => null,
'country_code' => null,
'timezone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iata_airport_code' => 'iataAirportCode',
'icao_airport_code' => 'icaoAirportCode',
'city_name' => 'cityName',
'localized_city_name' => 'localizedCityName',
'airport_name' => 'airportName',
'localized_airport_name' => 'localizedAirportName',
'country_code' => 'countryCode',
'timezone' => 'timezone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iata_airport_code' => 'setIataAirportCode',
'icao_airport_code' => 'setIcaoAirportCode',
'city_name' => 'setCityName',
'localized_city_name' => 'setLocalizedCityName',
'airport_name' => 'setAirportName',
'localized_airport_name' => 'setLocalizedAirportName',
'country_code' => 'setCountryCode',
'timezone' => 'setTimezone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iata_airport_code' => 'getIataAirportCode',
'icao_airport_code' => 'getIcaoAirportCode',
'city_name' => 'getCityName',
'localized_city_name' => 'getLocalizedCityName',
'airport_name' => 'getAirportName',
'localized_airport_name' => 'getLocalizedAirportName',
'country_code' => 'getCountryCode',
'timezone' => 'getTimezone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iata_airport_code'] = isset($data['iata_airport_code']) ? $data['iata_airport_code'] : null;
        $this->container['icao_airport_code'] = isset($data['icao_airport_code']) ? $data['icao_airport_code'] : null;
        $this->container['city_name'] = isset($data['city_name']) ? $data['city_name'] : null;
        $this->container['localized_city_name'] = isset($data['localized_city_name']) ? $data['localized_city_name'] : null;
        $this->container['airport_name'] = isset($data['airport_name']) ? $data['airport_name'] : null;
        $this->container['localized_airport_name'] = isset($data['localized_airport_name']) ? $data['localized_airport_name'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iata_airport_code'] === null) {
            $invalidProperties[] = "'iata_airport_code' can't be null";
        }
        if ($this->container['city_name'] === null) {
            $invalidProperties[] = "'city_name' can't be null";
        }
        if ($this->container['airport_name'] === null) {
            $invalidProperties[] = "'airport_name' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iata_airport_code
     *
     * @return string
     */
    public function getIataAirportCode()
    {
        return $this->container['iata_airport_code'];
    }

    /**
     * Sets iata_airport_code
     *
     * @param string $iata_airport_code The IATA code of the port. At least one of IATA or ICAO airport code is required.
     *
     * @return $this
     */
    public function setIataAirportCode($iata_airport_code)
    {
        $this->container['iata_airport_code'] = $iata_airport_code;

        return $this;
    }

    /**
     * Gets icao_airport_code
     *
     * @return string
     */
    public function getIcaoAirportCode()
    {
        return $this->container['icao_airport_code'];
    }

    /**
     * Sets icao_airport_code
     *
     * @param string $icao_airport_code The IATA code of the port. At least one of IATA or ICAO airport code is required.
     *
     * @return $this
     */
    public function setIcaoAirportCode($icao_airport_code)
    {
        $this->container['icao_airport_code'] = $icao_airport_code;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string $city_name The name of the city associated with the airport can be used in back/text fields.
     *
     * @return $this
     */
    public function setCityName($city_name)
    {
        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets localized_city_name
     *
     * @return \Swagger\Client\Model\IoLocalizedString
     */
    public function getLocalizedCityName()
    {
        return $this->container['localized_city_name'];
    }

    /**
     * Sets localized_city_name
     *
     * @param \Swagger\Client\Model\IoLocalizedString $localized_city_name localized_city_name
     *
     * @return $this
     */
    public function setLocalizedCityName($localized_city_name)
    {
        $this->container['localized_city_name'] = $localized_city_name;

        return $this;
    }

    /**
     * Gets airport_name
     *
     * @return string
     */
    public function getAirportName()
    {
        return $this->container['airport_name'];
    }

    /**
     * Sets airport_name
     *
     * @param string $airport_name The name of the airport to be displayed on the boarding pass above the airport code.
     *
     * @return $this
     */
    public function setAirportName($airport_name)
    {
        $this->container['airport_name'] = $airport_name;

        return $this;
    }

    /**
     * Gets localized_airport_name
     *
     * @return \Swagger\Client\Model\IoLocalizedString
     */
    public function getLocalizedAirportName()
    {
        return $this->container['localized_airport_name'];
    }

    /**
     * Sets localized_airport_name
     *
     * @param \Swagger\Client\Model\IoLocalizedString $localized_airport_name localized_airport_name
     *
     * @return $this
     */
    public function setLocalizedAirportName($localized_airport_name)
    {
        $this->container['localized_airport_name'] = $localized_airport_name;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The ISO 3166 country code of the port.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The timezone of the airport in IANA timezone format. This is required to ensure the correct rendering of times and dates in the time local to the port.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
