<?php
/**
 * IoMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IoMetadata Class Doc Comment
 *
 * @category Class
 * @description Additional data relating to the pass. Metadata can be provided with a create pass request. The only writeable field is UTM. All other fields are system generated.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ioMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => '\Swagger\Client\Model\IoStatus',
'lifecycle_events' => '\Swagger\Client\Model\IoLifecycleEvents[]',
'utm' => '\Swagger\Client\Model\IoUTM',
'alt_id' => 'string',
'issue_ip_address' => 'string',
'install_ip_address' => 'string',
'render_location' => '\Swagger\Client\Model\IoMetaLocation',
'render_ip_address' => 'string',
'install_user_agent' => 'string',
'render_user_agent' => 'string',
'install_device_attributes' => '\Swagger\Client\Model\IoDeviceAttributes[]',
'render_device_attributes' => '\Swagger\Client\Model\IoDeviceAttributes[]',
'issue_at' => '\DateTime',
'rendered_at' => '\DateTime',
'first_installed_at' => '\DateTime',
'last_installed_at' => '\DateTime',
'first_uninstalled_at' => '\DateTime',
'last_uninstalled_at' => '\DateTime',
'invalidated_at' => '\DateTime',
'last_updated_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
'lifecycle_events' => null,
'utm' => null,
'alt_id' => null,
'issue_ip_address' => null,
'install_ip_address' => null,
'render_location' => null,
'render_ip_address' => null,
'install_user_agent' => null,
'render_user_agent' => null,
'install_device_attributes' => null,
'render_device_attributes' => null,
'issue_at' => 'date-time',
'rendered_at' => 'date-time',
'first_installed_at' => 'date-time',
'last_installed_at' => 'date-time',
'first_uninstalled_at' => 'date-time',
'last_uninstalled_at' => 'date-time',
'invalidated_at' => 'date-time',
'last_updated_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
'lifecycle_events' => 'lifecycleEvents',
'utm' => 'utm',
'alt_id' => 'altId',
'issue_ip_address' => 'issueIpAddress',
'install_ip_address' => 'installIpAddress',
'render_location' => 'renderLocation',
'render_ip_address' => 'renderIpAddress',
'install_user_agent' => 'installUserAgent',
'render_user_agent' => 'renderUserAgent',
'install_device_attributes' => 'installDeviceAttributes',
'render_device_attributes' => 'renderDeviceAttributes',
'issue_at' => 'issueAt',
'rendered_at' => 'renderedAt',
'first_installed_at' => 'firstInstalledAt',
'last_installed_at' => 'lastInstalledAt',
'first_uninstalled_at' => 'firstUninstalledAt',
'last_uninstalled_at' => 'lastUninstalledAt',
'invalidated_at' => 'invalidatedAt',
'last_updated_at' => 'lastUpdatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
'lifecycle_events' => 'setLifecycleEvents',
'utm' => 'setUtm',
'alt_id' => 'setAltId',
'issue_ip_address' => 'setIssueIpAddress',
'install_ip_address' => 'setInstallIpAddress',
'render_location' => 'setRenderLocation',
'render_ip_address' => 'setRenderIpAddress',
'install_user_agent' => 'setInstallUserAgent',
'render_user_agent' => 'setRenderUserAgent',
'install_device_attributes' => 'setInstallDeviceAttributes',
'render_device_attributes' => 'setRenderDeviceAttributes',
'issue_at' => 'setIssueAt',
'rendered_at' => 'setRenderedAt',
'first_installed_at' => 'setFirstInstalledAt',
'last_installed_at' => 'setLastInstalledAt',
'first_uninstalled_at' => 'setFirstUninstalledAt',
'last_uninstalled_at' => 'setLastUninstalledAt',
'invalidated_at' => 'setInvalidatedAt',
'last_updated_at' => 'setLastUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
'lifecycle_events' => 'getLifecycleEvents',
'utm' => 'getUtm',
'alt_id' => 'getAltId',
'issue_ip_address' => 'getIssueIpAddress',
'install_ip_address' => 'getInstallIpAddress',
'render_location' => 'getRenderLocation',
'render_ip_address' => 'getRenderIpAddress',
'install_user_agent' => 'getInstallUserAgent',
'render_user_agent' => 'getRenderUserAgent',
'install_device_attributes' => 'getInstallDeviceAttributes',
'render_device_attributes' => 'getRenderDeviceAttributes',
'issue_at' => 'getIssueAt',
'rendered_at' => 'getRenderedAt',
'first_installed_at' => 'getFirstInstalledAt',
'last_installed_at' => 'getLastInstalledAt',
'first_uninstalled_at' => 'getFirstUninstalledAt',
'last_uninstalled_at' => 'getLastUninstalledAt',
'invalidated_at' => 'getInvalidatedAt',
'last_updated_at' => 'getLastUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['lifecycle_events'] = isset($data['lifecycle_events']) ? $data['lifecycle_events'] : null;
        $this->container['utm'] = isset($data['utm']) ? $data['utm'] : null;
        $this->container['alt_id'] = isset($data['alt_id']) ? $data['alt_id'] : null;
        $this->container['issue_ip_address'] = isset($data['issue_ip_address']) ? $data['issue_ip_address'] : null;
        $this->container['install_ip_address'] = isset($data['install_ip_address']) ? $data['install_ip_address'] : null;
        $this->container['render_location'] = isset($data['render_location']) ? $data['render_location'] : null;
        $this->container['render_ip_address'] = isset($data['render_ip_address']) ? $data['render_ip_address'] : null;
        $this->container['install_user_agent'] = isset($data['install_user_agent']) ? $data['install_user_agent'] : null;
        $this->container['render_user_agent'] = isset($data['render_user_agent']) ? $data['render_user_agent'] : null;
        $this->container['install_device_attributes'] = isset($data['install_device_attributes']) ? $data['install_device_attributes'] : null;
        $this->container['render_device_attributes'] = isset($data['render_device_attributes']) ? $data['render_device_attributes'] : null;
        $this->container['issue_at'] = isset($data['issue_at']) ? $data['issue_at'] : null;
        $this->container['rendered_at'] = isset($data['rendered_at']) ? $data['rendered_at'] : null;
        $this->container['first_installed_at'] = isset($data['first_installed_at']) ? $data['first_installed_at'] : null;
        $this->container['last_installed_at'] = isset($data['last_installed_at']) ? $data['last_installed_at'] : null;
        $this->container['first_uninstalled_at'] = isset($data['first_uninstalled_at']) ? $data['first_uninstalled_at'] : null;
        $this->container['last_uninstalled_at'] = isset($data['last_uninstalled_at']) ? $data['last_uninstalled_at'] : null;
        $this->container['invalidated_at'] = isset($data['invalidated_at']) ? $data['invalidated_at'] : null;
        $this->container['last_updated_at'] = isset($data['last_updated_at']) ? $data['last_updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\IoStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\IoStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets lifecycle_events
     *
     * @return \Swagger\Client\Model\IoLifecycleEvents[]
     */
    public function getLifecycleEvents()
    {
        return $this->container['lifecycle_events'];
    }

    /**
     * Sets lifecycle_events
     *
     * @param \Swagger\Client\Model\IoLifecycleEvents[] $lifecycle_events Events that the pass has attained. Not Writable.
     *
     * @return $this
     */
    public function setLifecycleEvents($lifecycle_events)
    {
        $this->container['lifecycle_events'] = $lifecycle_events;

        return $this;
    }

    /**
     * Gets utm
     *
     * @return \Swagger\Client\Model\IoUTM
     */
    public function getUtm()
    {
        return $this->container['utm'];
    }

    /**
     * Sets utm
     *
     * @param \Swagger\Client\Model\IoUTM $utm utm
     *
     * @return $this
     */
    public function setUtm($utm)
    {
        $this->container['utm'] = $utm;

        return $this;
    }

    /**
     * Gets alt_id
     *
     * @return string
     */
    public function getAltId()
    {
        return $this->container['alt_id'];
    }

    /**
     * Sets alt_id
     *
     * @param string $alt_id alt_id
     *
     * @return $this
     */
    public function setAltId($alt_id)
    {
        $this->container['alt_id'] = $alt_id;

        return $this;
    }

    /**
     * Gets issue_ip_address
     *
     * @return string
     */
    public function getIssueIpAddress()
    {
        return $this->container['issue_ip_address'];
    }

    /**
     * Sets issue_ip_address
     *
     * @param string $issue_ip_address issue_ip_address
     *
     * @return $this
     */
    public function setIssueIpAddress($issue_ip_address)
    {
        $this->container['issue_ip_address'] = $issue_ip_address;

        return $this;
    }

    /**
     * Gets install_ip_address
     *
     * @return string
     */
    public function getInstallIpAddress()
    {
        return $this->container['install_ip_address'];
    }

    /**
     * Sets install_ip_address
     *
     * @param string $install_ip_address IP address of the device where the pass was installed on. Not Writeable.
     *
     * @return $this
     */
    public function setInstallIpAddress($install_ip_address)
    {
        $this->container['install_ip_address'] = $install_ip_address;

        return $this;
    }

    /**
     * Gets render_location
     *
     * @return \Swagger\Client\Model\IoMetaLocation
     */
    public function getRenderLocation()
    {
        return $this->container['render_location'];
    }

    /**
     * Sets render_location
     *
     * @param \Swagger\Client\Model\IoMetaLocation $render_location render_location
     *
     * @return $this
     */
    public function setRenderLocation($render_location)
    {
        $this->container['render_location'] = $render_location;

        return $this;
    }

    /**
     * Gets render_ip_address
     *
     * @return string
     */
    public function getRenderIpAddress()
    {
        return $this->container['render_ip_address'];
    }

    /**
     * Sets render_ip_address
     *
     * @param string $render_ip_address IP address of the device where the pass landing page was rendered on. Not Writeable.
     *
     * @return $this
     */
    public function setRenderIpAddress($render_ip_address)
    {
        $this->container['render_ip_address'] = $render_ip_address;

        return $this;
    }

    /**
     * Gets install_user_agent
     *
     * @return string
     */
    public function getInstallUserAgent()
    {
        return $this->container['install_user_agent'];
    }

    /**
     * Sets install_user_agent
     *
     * @param string $install_user_agent User agent provided by the Wallet Application. Not Writable.
     *
     * @return $this
     */
    public function setInstallUserAgent($install_user_agent)
    {
        $this->container['install_user_agent'] = $install_user_agent;

        return $this;
    }

    /**
     * Gets render_user_agent
     *
     * @return string
     */
    public function getRenderUserAgent()
    {
        return $this->container['render_user_agent'];
    }

    /**
     * Sets render_user_agent
     *
     * @param string $render_user_agent User agent where the landing page was rendered on. Not Writable.
     *
     * @return $this
     */
    public function setRenderUserAgent($render_user_agent)
    {
        $this->container['render_user_agent'] = $render_user_agent;

        return $this;
    }

    /**
     * Gets install_device_attributes
     *
     * @return \Swagger\Client\Model\IoDeviceAttributes[]
     */
    public function getInstallDeviceAttributes()
    {
        return $this->container['install_device_attributes'];
    }

    /**
     * Sets install_device_attributes
     *
     * @param \Swagger\Client\Model\IoDeviceAttributes[] $install_device_attributes User agent provided by the Wallet Application. Not Writable.
     *
     * @return $this
     */
    public function setInstallDeviceAttributes($install_device_attributes)
    {
        $this->container['install_device_attributes'] = $install_device_attributes;

        return $this;
    }

    /**
     * Gets render_device_attributes
     *
     * @return \Swagger\Client\Model\IoDeviceAttributes[]
     */
    public function getRenderDeviceAttributes()
    {
        return $this->container['render_device_attributes'];
    }

    /**
     * Sets render_device_attributes
     *
     * @param \Swagger\Client\Model\IoDeviceAttributes[] $render_device_attributes User agent where the landing page was rendered on. Not Writable.
     *
     * @return $this
     */
    public function setRenderDeviceAttributes($render_device_attributes)
    {
        $this->container['render_device_attributes'] = $render_device_attributes;

        return $this;
    }

    /**
     * Gets issue_at
     *
     * @return \DateTime
     */
    public function getIssueAt()
    {
        return $this->container['issue_at'];
    }

    /**
     * Sets issue_at
     *
     * @param \DateTime $issue_at Date the pass record was created. Not Writable.
     *
     * @return $this
     */
    public function setIssueAt($issue_at)
    {
        $this->container['issue_at'] = $issue_at;

        return $this;
    }

    /**
     * Gets rendered_at
     *
     * @return \DateTime
     */
    public function getRenderedAt()
    {
        return $this->container['rendered_at'];
    }

    /**
     * Sets rendered_at
     *
     * @param \DateTime $rendered_at Date the pass was first displayed to the user to install. Not Writable.
     *
     * @return $this
     */
    public function setRenderedAt($rendered_at)
    {
        $this->container['rendered_at'] = $rendered_at;

        return $this;
    }

    /**
     * Gets first_installed_at
     *
     * @return \DateTime
     */
    public function getFirstInstalledAt()
    {
        return $this->container['first_installed_at'];
    }

    /**
     * Sets first_installed_at
     *
     * @param \DateTime $first_installed_at Date the pass was first installed in a mobile wallet. Not Writable.
     *
     * @return $this
     */
    public function setFirstInstalledAt($first_installed_at)
    {
        $this->container['first_installed_at'] = $first_installed_at;

        return $this;
    }

    /**
     * Gets last_installed_at
     *
     * @return \DateTime
     */
    public function getLastInstalledAt()
    {
        return $this->container['last_installed_at'];
    }

    /**
     * Sets last_installed_at
     *
     * @param \DateTime $last_installed_at Date the pass was last installed in a mobile wallet. For Apple devices, this will update each time the device registers a new token. Not Writable.
     *
     * @return $this
     */
    public function setLastInstalledAt($last_installed_at)
    {
        $this->container['last_installed_at'] = $last_installed_at;

        return $this;
    }

    /**
     * Gets first_uninstalled_at
     *
     * @return \DateTime
     */
    public function getFirstUninstalledAt()
    {
        return $this->container['first_uninstalled_at'];
    }

    /**
     * Sets first_uninstalled_at
     *
     * @param \DateTime $first_uninstalled_at Date the pass was first uninstalled from a mobile wallet.  For Apple devices, this represents either the time notifications were disabled, or when the pass was removed from the wallet as it is not possible to distinguish the two events. Not Writable.
     *
     * @return $this
     */
    public function setFirstUninstalledAt($first_uninstalled_at)
    {
        $this->container['first_uninstalled_at'] = $first_uninstalled_at;

        return $this;
    }

    /**
     * Gets last_uninstalled_at
     *
     * @return \DateTime
     */
    public function getLastUninstalledAt()
    {
        return $this->container['last_uninstalled_at'];
    }

    /**
     * Sets last_uninstalled_at
     *
     * @param \DateTime $last_uninstalled_at Date the pass was last uninstalled from a mobile wallet. Not Writable.
     *
     * @return $this
     */
    public function setLastUninstalledAt($last_uninstalled_at)
    {
        $this->container['last_uninstalled_at'] = $last_uninstalled_at;

        return $this;
    }

    /**
     * Gets invalidated_at
     *
     * @return \DateTime
     */
    public function getInvalidatedAt()
    {
        return $this->container['invalidated_at'];
    }

    /**
     * Sets invalidated_at
     *
     * @param \DateTime $invalidated_at Date the pass was invalidated. Not Writable.
     *
     * @return $this
     */
    public function setInvalidatedAt($invalidated_at)
    {
        $this->container['invalidated_at'] = $invalidated_at;

        return $this;
    }

    /**
     * Gets last_updated_at
     *
     * @return \DateTime
     */
    public function getLastUpdatedAt()
    {
        return $this->container['last_updated_at'];
    }

    /**
     * Sets last_updated_at
     *
     * @param \DateTime $last_updated_at Date the pass record was last updated. Can be used for segmenting passes based 'last visit', or 'last-purchase'. Not Writable.
     *
     * @return $this
     */
    public function setLastUpdatedAt($last_updated_at)
    {
        $this->container['last_updated_at'] = $last_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
