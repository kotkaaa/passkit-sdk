<?php
/**
 * FlightsBoardingPassRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightsBoardingPassRecord Class Doc Comment
 *
 * @category Class
 * @description A Boarding Pass record is unique to an individual passenger journey form a boarding point to a deplaning point. A Carrier and a Flight Designation record must exist. If a Flight record does not already exist, then it will be auto-generated based on the Flight Designation record (and other publicly available data if subscribed to data updates).
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightsBoardingPassRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'flightsBoardingPassRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'operating_carrier_pnr' => 'string',
'related_pn_rs' => 'string[]',
'ticket_number' => 'string',
'ticket_leg' => 'int',
'boarding_point' => 'string',
'deplaning_point' => 'string',
'carrier_code' => 'string',
'flight_number' => 'string',
'departure_date' => '\Swagger\Client\Model\IoDate',
'passenger' => '\Swagger\Client\Model\FlightsPassenger',
'class' => 'string',
'compartment_code' => '\Swagger\Client\Model\CabinCodesCompartmentCode',
'seat_number' => 'string',
'sequence_number' => 'int',
'boarding_group' => 'string',
'boarding_position' => 'string',
'free_baggage_allowance' => 'string',
'carry_on_allowance' => 'string',
'ssr_codes' => 'string[]',
'osi' => 'string',
'remarks' => 'string',
'passenger_status' => '\Swagger\Client\Model\FlightsPassengerStatus',
'conditional_items' => '\Swagger\Client\Model\FlightsConditionalItems',
'barcode_payload' => 'string',
'security_image' => 'string',
'privilege_image' => 'string',
'footer_image' => 'string',
'location_messages' => '\Swagger\Client\Model\IoGPSLocation[]',
'beacon_messages' => '\Swagger\Client\Model\IoBeacon[]',
'links' => '\Swagger\Client\Model\IoLink[]',
'barcode_additional_data' => 'string',
'infant_pass_id' => 'string',
'additional_data_items' => '\Swagger\Client\Model\IoDataItems',
'metadata' => '\Swagger\Client\Model\IoMetadata'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'operating_carrier_pnr' => null,
'related_pn_rs' => null,
'ticket_number' => null,
'ticket_leg' => 'int32',
'boarding_point' => null,
'deplaning_point' => null,
'carrier_code' => null,
'flight_number' => null,
'departure_date' => null,
'passenger' => null,
'class' => null,
'compartment_code' => null,
'seat_number' => null,
'sequence_number' => 'int32',
'boarding_group' => null,
'boarding_position' => null,
'free_baggage_allowance' => null,
'carry_on_allowance' => null,
'ssr_codes' => null,
'osi' => null,
'remarks' => null,
'passenger_status' => null,
'conditional_items' => null,
'barcode_payload' => null,
'security_image' => null,
'privilege_image' => null,
'footer_image' => null,
'location_messages' => null,
'beacon_messages' => null,
'links' => null,
'barcode_additional_data' => null,
'infant_pass_id' => null,
'additional_data_items' => null,
'metadata' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'operating_carrier_pnr' => 'operatingCarrierPNR',
'related_pn_rs' => 'relatedPNRs',
'ticket_number' => 'ticketNumber',
'ticket_leg' => 'ticketLeg',
'boarding_point' => 'boardingPoint',
'deplaning_point' => 'deplaningPoint',
'carrier_code' => 'carrierCode',
'flight_number' => 'flightNumber',
'departure_date' => 'departureDate',
'passenger' => 'passenger',
'class' => 'class',
'compartment_code' => 'compartmentCode',
'seat_number' => 'seatNumber',
'sequence_number' => 'sequenceNumber',
'boarding_group' => 'boardingGroup',
'boarding_position' => 'boardingPosition',
'free_baggage_allowance' => 'freeBaggageAllowance',
'carry_on_allowance' => 'carryOnAllowance',
'ssr_codes' => 'ssrCodes',
'osi' => 'osi',
'remarks' => 'remarks',
'passenger_status' => 'passengerStatus',
'conditional_items' => 'conditionalItems',
'barcode_payload' => 'barcodePayload',
'security_image' => 'securityImage',
'privilege_image' => 'privilegeImage',
'footer_image' => 'footerImage',
'location_messages' => 'locationMessages',
'beacon_messages' => 'beaconMessages',
'links' => 'links',
'barcode_additional_data' => 'barcodeAdditionalData',
'infant_pass_id' => 'infantPassId',
'additional_data_items' => 'additionalDataItems',
'metadata' => 'metadata'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'operating_carrier_pnr' => 'setOperatingCarrierPnr',
'related_pn_rs' => 'setRelatedPnRs',
'ticket_number' => 'setTicketNumber',
'ticket_leg' => 'setTicketLeg',
'boarding_point' => 'setBoardingPoint',
'deplaning_point' => 'setDeplaningPoint',
'carrier_code' => 'setCarrierCode',
'flight_number' => 'setFlightNumber',
'departure_date' => 'setDepartureDate',
'passenger' => 'setPassenger',
'class' => 'setClass',
'compartment_code' => 'setCompartmentCode',
'seat_number' => 'setSeatNumber',
'sequence_number' => 'setSequenceNumber',
'boarding_group' => 'setBoardingGroup',
'boarding_position' => 'setBoardingPosition',
'free_baggage_allowance' => 'setFreeBaggageAllowance',
'carry_on_allowance' => 'setCarryOnAllowance',
'ssr_codes' => 'setSsrCodes',
'osi' => 'setOsi',
'remarks' => 'setRemarks',
'passenger_status' => 'setPassengerStatus',
'conditional_items' => 'setConditionalItems',
'barcode_payload' => 'setBarcodePayload',
'security_image' => 'setSecurityImage',
'privilege_image' => 'setPrivilegeImage',
'footer_image' => 'setFooterImage',
'location_messages' => 'setLocationMessages',
'beacon_messages' => 'setBeaconMessages',
'links' => 'setLinks',
'barcode_additional_data' => 'setBarcodeAdditionalData',
'infant_pass_id' => 'setInfantPassId',
'additional_data_items' => 'setAdditionalDataItems',
'metadata' => 'setMetadata'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'operating_carrier_pnr' => 'getOperatingCarrierPnr',
'related_pn_rs' => 'getRelatedPnRs',
'ticket_number' => 'getTicketNumber',
'ticket_leg' => 'getTicketLeg',
'boarding_point' => 'getBoardingPoint',
'deplaning_point' => 'getDeplaningPoint',
'carrier_code' => 'getCarrierCode',
'flight_number' => 'getFlightNumber',
'departure_date' => 'getDepartureDate',
'passenger' => 'getPassenger',
'class' => 'getClass',
'compartment_code' => 'getCompartmentCode',
'seat_number' => 'getSeatNumber',
'sequence_number' => 'getSequenceNumber',
'boarding_group' => 'getBoardingGroup',
'boarding_position' => 'getBoardingPosition',
'free_baggage_allowance' => 'getFreeBaggageAllowance',
'carry_on_allowance' => 'getCarryOnAllowance',
'ssr_codes' => 'getSsrCodes',
'osi' => 'getOsi',
'remarks' => 'getRemarks',
'passenger_status' => 'getPassengerStatus',
'conditional_items' => 'getConditionalItems',
'barcode_payload' => 'getBarcodePayload',
'security_image' => 'getSecurityImage',
'privilege_image' => 'getPrivilegeImage',
'footer_image' => 'getFooterImage',
'location_messages' => 'getLocationMessages',
'beacon_messages' => 'getBeaconMessages',
'links' => 'getLinks',
'barcode_additional_data' => 'getBarcodeAdditionalData',
'infant_pass_id' => 'getInfantPassId',
'additional_data_items' => 'getAdditionalDataItems',
'metadata' => 'getMetadata'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['operating_carrier_pnr'] = isset($data['operating_carrier_pnr']) ? $data['operating_carrier_pnr'] : null;
        $this->container['related_pn_rs'] = isset($data['related_pn_rs']) ? $data['related_pn_rs'] : null;
        $this->container['ticket_number'] = isset($data['ticket_number']) ? $data['ticket_number'] : null;
        $this->container['ticket_leg'] = isset($data['ticket_leg']) ? $data['ticket_leg'] : null;
        $this->container['boarding_point'] = isset($data['boarding_point']) ? $data['boarding_point'] : null;
        $this->container['deplaning_point'] = isset($data['deplaning_point']) ? $data['deplaning_point'] : null;
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['flight_number'] = isset($data['flight_number']) ? $data['flight_number'] : null;
        $this->container['departure_date'] = isset($data['departure_date']) ? $data['departure_date'] : null;
        $this->container['passenger'] = isset($data['passenger']) ? $data['passenger'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['compartment_code'] = isset($data['compartment_code']) ? $data['compartment_code'] : null;
        $this->container['seat_number'] = isset($data['seat_number']) ? $data['seat_number'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['boarding_group'] = isset($data['boarding_group']) ? $data['boarding_group'] : null;
        $this->container['boarding_position'] = isset($data['boarding_position']) ? $data['boarding_position'] : null;
        $this->container['free_baggage_allowance'] = isset($data['free_baggage_allowance']) ? $data['free_baggage_allowance'] : null;
        $this->container['carry_on_allowance'] = isset($data['carry_on_allowance']) ? $data['carry_on_allowance'] : null;
        $this->container['ssr_codes'] = isset($data['ssr_codes']) ? $data['ssr_codes'] : null;
        $this->container['osi'] = isset($data['osi']) ? $data['osi'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['passenger_status'] = isset($data['passenger_status']) ? $data['passenger_status'] : null;
        $this->container['conditional_items'] = isset($data['conditional_items']) ? $data['conditional_items'] : null;
        $this->container['barcode_payload'] = isset($data['barcode_payload']) ? $data['barcode_payload'] : null;
        $this->container['security_image'] = isset($data['security_image']) ? $data['security_image'] : null;
        $this->container['privilege_image'] = isset($data['privilege_image']) ? $data['privilege_image'] : null;
        $this->container['footer_image'] = isset($data['footer_image']) ? $data['footer_image'] : null;
        $this->container['location_messages'] = isset($data['location_messages']) ? $data['location_messages'] : null;
        $this->container['beacon_messages'] = isset($data['beacon_messages']) ? $data['beacon_messages'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['barcode_additional_data'] = isset($data['barcode_additional_data']) ? $data['barcode_additional_data'] : null;
        $this->container['infant_pass_id'] = isset($data['infant_pass_id']) ? $data['infant_pass_id'] : null;
        $this->container['additional_data_items'] = isset($data['additional_data_items']) ? $data['additional_data_items'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['operating_carrier_pnr'] === null) {
            $invalidProperties[] = "'operating_carrier_pnr' can't be null";
        }
        if ($this->container['boarding_point'] === null) {
            $invalidProperties[] = "'boarding_point' can't be null";
        }
        if ($this->container['deplaning_point'] === null) {
            $invalidProperties[] = "'deplaning_point' can't be null";
        }
        if ($this->container['carrier_code'] === null) {
            $invalidProperties[] = "'carrier_code' can't be null";
        }
        if ($this->container['flight_number'] === null) {
            $invalidProperties[] = "'flight_number' can't be null";
        }
        if ($this->container['departure_date'] === null) {
            $invalidProperties[] = "'departure_date' can't be null";
        }
        if ($this->container['passenger'] === null) {
            $invalidProperties[] = "'passenger' can't be null";
        }
        if ($this->container['sequence_number'] === null) {
            $invalidProperties[] = "'sequence_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id assigned by PassKit to represent the boarding pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets operating_carrier_pnr
     *
     * @return string
     */
    public function getOperatingCarrierPnr()
    {
        return $this->container['operating_carrier_pnr'];
    }

    /**
     * Sets operating_carrier_pnr
     *
     * @param string $operating_carrier_pnr PNR code of the carrier operating the flight, independent of code-share, lease or other issues.
     *
     * @return $this
     */
    public function setOperatingCarrierPnr($operating_carrier_pnr)
    {
        $this->container['operating_carrier_pnr'] = $operating_carrier_pnr;

        return $this;
    }

    /**
     * Gets related_pn_rs
     *
     * @return string[]
     */
    public function getRelatedPnRs()
    {
        return $this->container['related_pn_rs'];
    }

    /**
     * Sets related_pn_rs
     *
     * @param string[] $related_pn_rs Related PNRs can be used to index the record and can be the marketing carrier PNR or a master PNR containing multiple bookings. If required, a related PNR can be followed by the two or three character designator of the carrier or CRS controlling the PNR, separated by an oblique.
     *
     * @return $this
     */
    public function setRelatedPnRs($related_pn_rs)
    {
        $this->container['related_pn_rs'] = $related_pn_rs;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string $ticket_number Ticket number can optionally be prefixed by the 3 digit airline code, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
     *
     * @return $this
     */
    public function setTicketNumber($ticket_number)
    {
        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets ticket_leg
     *
     * @return int
     */
    public function getTicketLeg()
    {
        return $this->container['ticket_leg'];
    }

    /**
     * Sets ticket_leg
     *
     * @param int $ticket_leg The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
     *
     * @return $this
     */
    public function setTicketLeg($ticket_leg)
    {
        $this->container['ticket_leg'] = $ticket_leg;

        return $this;
    }

    /**
     * Gets boarding_point
     *
     * @return string
     */
    public function getBoardingPoint()
    {
        return $this->container['boarding_point'];
    }

    /**
     * Sets boarding_point
     *
     * @param string $boarding_point 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
     *
     * @return $this
     */
    public function setBoardingPoint($boarding_point)
    {
        $this->container['boarding_point'] = $boarding_point;

        return $this;
    }

    /**
     * Gets deplaning_point
     *
     * @return string
     */
    public function getDeplaningPoint()
    {
        return $this->container['deplaning_point'];
    }

    /**
     * Sets deplaning_point
     *
     * @param string $deplaning_point 3 letter IATA code or 4 letter ICAO code of the passenger deplaning point.
     *
     * @return $this
     */
    public function setDeplaningPoint($deplaning_point)
    {
        $this->container['deplaning_point'] = $deplaning_point;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code The two or three character airline code of the marketing carrier.
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets flight_number
     *
     * @return string
     */
    public function getFlightNumber()
    {
        return $this->container['flight_number'];
    }

    /**
     * Sets flight_number
     *
     * @param string $flight_number The flight number of the marketing character (excluding the carrier code).
     *
     * @return $this
     */
    public function setFlightNumber($flight_number)
    {
        $this->container['flight_number'] = $flight_number;

        return $this;
    }

    /**
     * Gets departure_date
     *
     * @return \Swagger\Client\Model\IoDate
     */
    public function getDepartureDate()
    {
        return $this->container['departure_date'];
    }

    /**
     * Sets departure_date
     *
     * @param \Swagger\Client\Model\IoDate $departure_date departure_date
     *
     * @return $this
     */
    public function setDepartureDate($departure_date)
    {
        $this->container['departure_date'] = $departure_date;

        return $this;
    }

    /**
     * Gets passenger
     *
     * @return \Swagger\Client\Model\FlightsPassenger
     */
    public function getPassenger()
    {
        return $this->container['passenger'];
    }

    /**
     * Sets passenger
     *
     * @param \Swagger\Client\Model\FlightsPassenger $passenger passenger
     *
     * @return $this
     */
    public function setPassenger($passenger)
    {
        $this->container['passenger'] = $passenger;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class Free-form text that can be used to describe the ticket class, tier or cabin. E.g. \"Business\", \"Premium Economy\", \"Club World\".
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets compartment_code
     *
     * @return \Swagger\Client\Model\CabinCodesCompartmentCode
     */
    public function getCompartmentCode()
    {
        return $this->container['compartment_code'];
    }

    /**
     * Sets compartment_code
     *
     * @param \Swagger\Client\Model\CabinCodesCompartmentCode $compartment_code compartment_code
     *
     * @return $this
     */
    public function setCompartmentCode($compartment_code)
    {
        $this->container['compartment_code'] = $compartment_code;

        return $this;
    }

    /**
     * Gets seat_number
     *
     * @return string
     */
    public function getSeatNumber()
    {
        return $this->container['seat_number'];
    }

    /**
     * Sets seat_number
     *
     * @param string $seat_number The allocated seat number.  The text \"ANY\" or \"XXX\" can be used where a free seating condition exists.
     *
     * @return $this
     */
    public function setSeatNumber($seat_number)
    {
        $this->container['seat_number'] = $seat_number;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int $sequence_number The check in sequence number.
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets boarding_group
     *
     * @return string
     */
    public function getBoardingGroup()
    {
        return $this->container['boarding_group'];
    }

    /**
     * Sets boarding_group
     *
     * @param string $boarding_group A boarding group or zone indicator. This is displayed on the pass to assist passengers and ground-staff to expedite boarding.
     *
     * @return $this
     */
    public function setBoardingGroup($boarding_group)
    {
        $this->container['boarding_group'] = $boarding_group;

        return $this;
    }

    /**
     * Gets boarding_position
     *
     * @return string
     */
    public function getBoardingPosition()
    {
        return $this->container['boarding_position'];
    }

    /**
     * Sets boarding_position
     *
     * @param string $boarding_position An additional field to indicate boarding priority or order.
     *
     * @return $this
     */
    public function setBoardingPosition($boarding_position)
    {
        $this->container['boarding_position'] = $boarding_position;

        return $this;
    }

    /**
     * Gets free_baggage_allowance
     *
     * @return string
     */
    public function getFreeBaggageAllowance()
    {
        return $this->container['free_baggage_allowance'];
    }

    /**
     * Sets free_baggage_allowance
     *
     * @param string $free_baggage_allowance 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
     *
     * @return $this
     */
    public function setFreeBaggageAllowance($free_baggage_allowance)
    {
        $this->container['free_baggage_allowance'] = $free_baggage_allowance;

        return $this;
    }

    /**
     * Gets carry_on_allowance
     *
     * @return string
     */
    public function getCarryOnAllowance()
    {
        return $this->container['carry_on_allowance'];
    }

    /**
     * Sets carry_on_allowance
     *
     * @param string $carry_on_allowance 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
     *
     * @return $this
     */
    public function setCarryOnAllowance($carry_on_allowance)
    {
        $this->container['carry_on_allowance'] = $carry_on_allowance;

        return $this;
    }

    /**
     * Gets ssr_codes
     *
     * @return string[]
     */
    public function getSsrCodes()
    {
        return $this->container['ssr_codes'];
    }

    /**
     * Sets ssr_codes
     *
     * @param string[] $ssr_codes An array of SSR codes. Codes should be 4 capitalized letters. Codes may be annotated.
     *
     * @return $this
     */
    public function setSsrCodes($ssr_codes)
    {
        $this->container['ssr_codes'] = $ssr_codes;

        return $this;
    }

    /**
     * Gets osi
     *
     * @return string
     */
    public function getOsi()
    {
        return $this->container['osi'];
    }

    /**
     * Sets osi
     *
     * @param string $osi Other service information that may be relevant to the booking.
     *
     * @return $this
     */
    public function setOsi($osi)
    {
        $this->container['osi'] = $osi;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks Free text booking remarks.
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets passenger_status
     *
     * @return \Swagger\Client\Model\FlightsPassengerStatus
     */
    public function getPassengerStatus()
    {
        return $this->container['passenger_status'];
    }

    /**
     * Sets passenger_status
     *
     * @param \Swagger\Client\Model\FlightsPassengerStatus $passenger_status passenger_status
     *
     * @return $this
     */
    public function setPassengerStatus($passenger_status)
    {
        $this->container['passenger_status'] = $passenger_status;

        return $this;
    }

    /**
     * Gets conditional_items
     *
     * @return \Swagger\Client\Model\FlightsConditionalItems
     */
    public function getConditionalItems()
    {
        return $this->container['conditional_items'];
    }

    /**
     * Sets conditional_items
     *
     * @param \Swagger\Client\Model\FlightsConditionalItems $conditional_items conditional_items
     *
     * @return $this
     */
    public function setConditionalItems($conditional_items)
    {
        $this->container['conditional_items'] = $conditional_items;

        return $this;
    }

    /**
     * Gets barcode_payload
     *
     * @return string
     */
    public function getBarcodePayload()
    {
        return $this->container['barcode_payload'];
    }

    /**
     * Sets barcode_payload
     *
     * @param string $barcode_payload Payload to be encoded in the pass barcode. If omitted, an IATA BCBP Standard (Resolution 792) barcode will be generated.
     *
     * @return $this
     */
    public function setBarcodePayload($barcode_payload)
    {
        $this->container['barcode_payload'] = $barcode_payload;

        return $this;
    }

    /**
     * Gets security_image
     *
     * @return string
     */
    public function getSecurityImage()
    {
        return $this->container['security_image'];
    }

    /**
     * Sets security_image
     *
     * @param string $security_image Security image id for display above the barcode on a Google Pay pass.
     *
     * @return $this
     */
    public function setSecurityImage($security_image)
    {
        $this->container['security_image'] = $security_image;

        return $this;
    }

    /**
     * Gets privilege_image
     *
     * @return string
     */
    public function getPrivilegeImage()
    {
        return $this->container['privilege_image'];
    }

    /**
     * Sets privilege_image
     *
     * @param string $privilege_image Privilege image id for display above the barcode on a Google Pay pass.
     *
     * @return $this
     */
    public function setPrivilegeImage($privilege_image)
    {
        $this->container['privilege_image'] = $privilege_image;

        return $this;
    }

    /**
     * Gets footer_image
     *
     * @return string
     */
    public function getFooterImage()
    {
        return $this->container['footer_image'];
    }

    /**
     * Sets footer_image
     *
     * @param string $footer_image Footer image id for display above the barcode on iOS devices.
     *
     * @return $this
     */
    public function setFooterImage($footer_image)
    {
        $this->container['footer_image'] = $footer_image;

        return $this;
    }

    /**
     * Gets location_messages
     *
     * @return \Swagger\Client\Model\IoGPSLocation[]
     */
    public function getLocationMessages()
    {
        return $this->container['location_messages'];
    }

    /**
     * Sets location_messages
     *
     * @param \Swagger\Client\Model\IoGPSLocation[] $location_messages A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designation and flight values.
     *
     * @return $this
     */
    public function setLocationMessages($location_messages)
    {
        $this->container['location_messages'] = $location_messages;

        return $this;
    }

    /**
     * Gets beacon_messages
     *
     * @return \Swagger\Client\Model\IoBeacon[]
     */
    public function getBeaconMessages()
    {
        return $this->container['beacon_messages'];
    }

    /**
     * Sets beacon_messages
     *
     * @param \Swagger\Client\Model\IoBeacon[] $beacon_messages A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designation and flight values.
     *
     * @return $this
     */
    public function setBeaconMessages($beacon_messages)
    {
        $this->container['beacon_messages'] = $beacon_messages;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\IoLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\IoLink[] $links A list of links to be appended to the end of each boarding pass.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets barcode_additional_data
     *
     * @return string
     */
    public function getBarcodeAdditionalData()
    {
        return $this->container['barcode_additional_data'];
    }

    /**
     * Sets barcode_additional_data
     *
     * @param string $barcode_additional_data If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the barcode.
     *
     * @return $this
     */
    public function setBarcodeAdditionalData($barcode_additional_data)
    {
        $this->container['barcode_additional_data'] = $barcode_additional_data;

        return $this;
    }

    /**
     * Gets infant_pass_id
     *
     * @return string
     */
    public function getInfantPassId()
    {
        return $this->container['infant_pass_id'];
    }

    /**
     * Sets infant_pass_id
     *
     * @param string $infant_pass_id If a passenger is travelling as an infant and the airline is not using conditional data with a passenger description of 6 (Adult With Infant), an id of the infant's boarding pass will be recorded here.
     *
     * @return $this
     */
    public function setInfantPassId($infant_pass_id)
    {
        $this->container['infant_pass_id'] = $infant_pass_id;

        return $this;
    }

    /**
     * Gets additional_data_items
     *
     * @return \Swagger\Client\Model\IoDataItems
     */
    public function getAdditionalDataItems()
    {
        return $this->container['additional_data_items'];
    }

    /**
     * Sets additional_data_items
     *
     * @param \Swagger\Client\Model\IoDataItems $additional_data_items additional_data_items
     *
     * @return $this
     */
    public function setAdditionalDataItems($additional_data_items)
    {
        $this->container['additional_data_items'] = $additional_data_items;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Swagger\Client\Model\IoMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Swagger\Client\Model\IoMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
