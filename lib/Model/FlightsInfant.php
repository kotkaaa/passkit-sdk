<?php
/**
 * FlightsInfant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightsInfant Class Doc Comment
 *
 * @category Class
 * @description Details of infant under 2 years not occupying a seat.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightsInfant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'flightsInfant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'infant_details' => '\Swagger\Client\Model\IoPerson',
'identity_details' => '\Swagger\Client\Model\FlightsIdentityDetails',
'barcode_payload' => 'string',
'conditional_items' => '\Swagger\Client\Model\FlightsConditionalItems',
'barcode_additional_data' => 'string',
'security_image' => 'string',
'privilege_image' => 'string',
'footer_image' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'infant_details' => null,
'identity_details' => null,
'barcode_payload' => null,
'conditional_items' => null,
'barcode_additional_data' => null,
'security_image' => null,
'privilege_image' => null,
'footer_image' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'infant_details' => 'infantDetails',
'identity_details' => 'identityDetails',
'barcode_payload' => 'barcodePayload',
'conditional_items' => 'conditionalItems',
'barcode_additional_data' => 'barcodeAdditionalData',
'security_image' => 'securityImage',
'privilege_image' => 'privilegeImage',
'footer_image' => 'footerImage'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'infant_details' => 'setInfantDetails',
'identity_details' => 'setIdentityDetails',
'barcode_payload' => 'setBarcodePayload',
'conditional_items' => 'setConditionalItems',
'barcode_additional_data' => 'setBarcodeAdditionalData',
'security_image' => 'setSecurityImage',
'privilege_image' => 'setPrivilegeImage',
'footer_image' => 'setFooterImage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'infant_details' => 'getInfantDetails',
'identity_details' => 'getIdentityDetails',
'barcode_payload' => 'getBarcodePayload',
'conditional_items' => 'getConditionalItems',
'barcode_additional_data' => 'getBarcodeAdditionalData',
'security_image' => 'getSecurityImage',
'privilege_image' => 'getPrivilegeImage',
'footer_image' => 'getFooterImage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['infant_details'] = isset($data['infant_details']) ? $data['infant_details'] : null;
        $this->container['identity_details'] = isset($data['identity_details']) ? $data['identity_details'] : null;
        $this->container['barcode_payload'] = isset($data['barcode_payload']) ? $data['barcode_payload'] : null;
        $this->container['conditional_items'] = isset($data['conditional_items']) ? $data['conditional_items'] : null;
        $this->container['barcode_additional_data'] = isset($data['barcode_additional_data']) ? $data['barcode_additional_data'] : null;
        $this->container['security_image'] = isset($data['security_image']) ? $data['security_image'] : null;
        $this->container['privilege_image'] = isset($data['privilege_image']) ? $data['privilege_image'] : null;
        $this->container['footer_image'] = isset($data['footer_image']) ? $data['footer_image'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets infant_details
     *
     * @return \Swagger\Client\Model\IoPerson
     */
    public function getInfantDetails()
    {
        return $this->container['infant_details'];
    }

    /**
     * Sets infant_details
     *
     * @param \Swagger\Client\Model\IoPerson $infant_details infant_details
     *
     * @return $this
     */
    public function setInfantDetails($infant_details)
    {
        $this->container['infant_details'] = $infant_details;

        return $this;
    }

    /**
     * Gets identity_details
     *
     * @return \Swagger\Client\Model\FlightsIdentityDetails
     */
    public function getIdentityDetails()
    {
        return $this->container['identity_details'];
    }

    /**
     * Sets identity_details
     *
     * @param \Swagger\Client\Model\FlightsIdentityDetails $identity_details identity_details
     *
     * @return $this
     */
    public function setIdentityDetails($identity_details)
    {
        $this->container['identity_details'] = $identity_details;

        return $this;
    }

    /**
     * Gets barcode_payload
     *
     * @return string
     */
    public function getBarcodePayload()
    {
        return $this->container['barcode_payload'];
    }

    /**
     * Sets barcode_payload
     *
     * @param string $barcode_payload The barcode payload to be rendered on the infant boarding pass. If not provided, an IATA barcode will be compiled, based on the adult boarding pass barcode data.
     *
     * @return $this
     */
    public function setBarcodePayload($barcode_payload)
    {
        $this->container['barcode_payload'] = $barcode_payload;

        return $this;
    }

    /**
     * Gets conditional_items
     *
     * @return \Swagger\Client\Model\FlightsConditionalItems
     */
    public function getConditionalItems()
    {
        return $this->container['conditional_items'];
    }

    /**
     * Sets conditional_items
     *
     * @param \Swagger\Client\Model\FlightsConditionalItems $conditional_items conditional_items
     *
     * @return $this
     */
    public function setConditionalItems($conditional_items)
    {
        $this->container['conditional_items'] = $conditional_items;

        return $this;
    }

    /**
     * Gets barcode_additional_data
     *
     * @return string
     */
    public function getBarcodeAdditionalData()
    {
        return $this->container['barcode_additional_data'];
    }

    /**
     * Sets barcode_additional_data
     *
     * @param string $barcode_additional_data Optional additional barcode data. If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the infant barcode.
     *
     * @return $this
     */
    public function setBarcodeAdditionalData($barcode_additional_data)
    {
        $this->container['barcode_additional_data'] = $barcode_additional_data;

        return $this;
    }

    /**
     * Gets security_image
     *
     * @return string
     */
    public function getSecurityImage()
    {
        return $this->container['security_image'];
    }

    /**
     * Sets security_image
     *
     * @param string $security_image Security image id for display above the barcode on a Google Pay pass.
     *
     * @return $this
     */
    public function setSecurityImage($security_image)
    {
        $this->container['security_image'] = $security_image;

        return $this;
    }

    /**
     * Gets privilege_image
     *
     * @return string
     */
    public function getPrivilegeImage()
    {
        return $this->container['privilege_image'];
    }

    /**
     * Sets privilege_image
     *
     * @param string $privilege_image Privilege image id for display above the barcode on a Google Pay pass.
     *
     * @return $this
     */
    public function setPrivilegeImage($privilege_image)
    {
        $this->container['privilege_image'] = $privilege_image;

        return $this;
    }

    /**
     * Gets footer_image
     *
     * @return string
     */
    public function getFooterImage()
    {
        return $this->container['footer_image'];
    }

    /**
     * Sets footer_image
     *
     * @param string $footer_image Footer image id for display above the barcode on iOS devices.
     *
     * @return $this
     */
    public function setFooterImage($footer_image)
    {
        $this->container['footer_image'] = $footer_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
