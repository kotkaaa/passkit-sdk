<?php
/**
 * FlightsFlightDesignator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Flights API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightsFlightDesignator Class Doc Comment
 *
 * @category Class
 * @description A flight designator record describes mostly static data with regard to a flight operation.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightsFlightDesignator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'flightsFlightDesignator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_code' => 'string',
'flight_number' => 'string',
'valid_from' => '\Swagger\Client\Model\IoDate',
'revision' => 'int',
'active' => 'bool',
'schedule' => '\Swagger\Client\Model\FlightsFlightSchedule',
'operating_carrier_code' => 'string',
'operating_flight_number' => 'string',
'code_share_flight_numbers' => 'string[]',
'origin' => 'string',
'destination' => 'string',
'transit_points' => 'string[]',
'departure_terminal' => 'string',
'arrival_terminal' => 'string',
'transit_terminals' => 'string[]',
'boarding_policy' => '\Swagger\Client\Model\FlightsBoardingPolicy',
'seat_class_policy' => '\Swagger\Client\Model\FlightsSeatClassPolicy',
'alerts' => '\Swagger\Client\Model\FlightsFlightAlerts[]',
'pass_template_id' => 'string',
'auto_invalidate_after' => 'int',
'auto_invalidate_cancelled_passes' => 'bool',
'location_messages' => '\Swagger\Client\Model\IoGPSLocation[]',
'beacon_messages' => '\Swagger\Client\Model\IoBeacon[]',
'default_links' => '\Swagger\Client\Model\IoLink[]',
'conditional_items' => 'bool',
'barcode_additional_data' => 'string',
'invalidate_cancelled_passes' => '\Swagger\Client\Model\IoToggle'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_code' => null,
'flight_number' => null,
'valid_from' => null,
'revision' => 'int64',
'active' => null,
'schedule' => null,
'operating_carrier_code' => null,
'operating_flight_number' => null,
'code_share_flight_numbers' => null,
'origin' => null,
'destination' => null,
'transit_points' => null,
'departure_terminal' => null,
'arrival_terminal' => null,
'transit_terminals' => null,
'boarding_policy' => null,
'seat_class_policy' => null,
'alerts' => null,
'pass_template_id' => null,
'auto_invalidate_after' => 'int64',
'auto_invalidate_cancelled_passes' => null,
'location_messages' => null,
'beacon_messages' => null,
'default_links' => null,
'conditional_items' => null,
'barcode_additional_data' => null,
'invalidate_cancelled_passes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_code' => 'carrierCode',
'flight_number' => 'flightNumber',
'valid_from' => 'validFrom',
'revision' => 'revision',
'active' => 'active',
'schedule' => 'schedule',
'operating_carrier_code' => 'operatingCarrierCode',
'operating_flight_number' => 'operatingFlightNumber',
'code_share_flight_numbers' => 'codeShareFlightNumbers',
'origin' => 'origin',
'destination' => 'destination',
'transit_points' => 'transitPoints',
'departure_terminal' => 'departureTerminal',
'arrival_terminal' => 'arrivalTerminal',
'transit_terminals' => 'transitTerminals',
'boarding_policy' => 'boardingPolicy',
'seat_class_policy' => 'seatClassPolicy',
'alerts' => 'alerts',
'pass_template_id' => 'passTemplateId',
'auto_invalidate_after' => 'autoInvalidateAfter',
'auto_invalidate_cancelled_passes' => 'autoInvalidateCancelledPasses',
'location_messages' => 'locationMessages',
'beacon_messages' => 'beaconMessages',
'default_links' => 'defaultLinks',
'conditional_items' => 'ConditionalItems',
'barcode_additional_data' => 'BarcodeAdditionalData',
'invalidate_cancelled_passes' => 'invalidateCancelledPasses'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_code' => 'setCarrierCode',
'flight_number' => 'setFlightNumber',
'valid_from' => 'setValidFrom',
'revision' => 'setRevision',
'active' => 'setActive',
'schedule' => 'setSchedule',
'operating_carrier_code' => 'setOperatingCarrierCode',
'operating_flight_number' => 'setOperatingFlightNumber',
'code_share_flight_numbers' => 'setCodeShareFlightNumbers',
'origin' => 'setOrigin',
'destination' => 'setDestination',
'transit_points' => 'setTransitPoints',
'departure_terminal' => 'setDepartureTerminal',
'arrival_terminal' => 'setArrivalTerminal',
'transit_terminals' => 'setTransitTerminals',
'boarding_policy' => 'setBoardingPolicy',
'seat_class_policy' => 'setSeatClassPolicy',
'alerts' => 'setAlerts',
'pass_template_id' => 'setPassTemplateId',
'auto_invalidate_after' => 'setAutoInvalidateAfter',
'auto_invalidate_cancelled_passes' => 'setAutoInvalidateCancelledPasses',
'location_messages' => 'setLocationMessages',
'beacon_messages' => 'setBeaconMessages',
'default_links' => 'setDefaultLinks',
'conditional_items' => 'setConditionalItems',
'barcode_additional_data' => 'setBarcodeAdditionalData',
'invalidate_cancelled_passes' => 'setInvalidateCancelledPasses'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_code' => 'getCarrierCode',
'flight_number' => 'getFlightNumber',
'valid_from' => 'getValidFrom',
'revision' => 'getRevision',
'active' => 'getActive',
'schedule' => 'getSchedule',
'operating_carrier_code' => 'getOperatingCarrierCode',
'operating_flight_number' => 'getOperatingFlightNumber',
'code_share_flight_numbers' => 'getCodeShareFlightNumbers',
'origin' => 'getOrigin',
'destination' => 'getDestination',
'transit_points' => 'getTransitPoints',
'departure_terminal' => 'getDepartureTerminal',
'arrival_terminal' => 'getArrivalTerminal',
'transit_terminals' => 'getTransitTerminals',
'boarding_policy' => 'getBoardingPolicy',
'seat_class_policy' => 'getSeatClassPolicy',
'alerts' => 'getAlerts',
'pass_template_id' => 'getPassTemplateId',
'auto_invalidate_after' => 'getAutoInvalidateAfter',
'auto_invalidate_cancelled_passes' => 'getAutoInvalidateCancelledPasses',
'location_messages' => 'getLocationMessages',
'beacon_messages' => 'getBeaconMessages',
'default_links' => 'getDefaultLinks',
'conditional_items' => 'getConditionalItems',
'barcode_additional_data' => 'getBarcodeAdditionalData',
'invalidate_cancelled_passes' => 'getInvalidateCancelledPasses'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['flight_number'] = isset($data['flight_number']) ? $data['flight_number'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : true;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['operating_carrier_code'] = isset($data['operating_carrier_code']) ? $data['operating_carrier_code'] : null;
        $this->container['operating_flight_number'] = isset($data['operating_flight_number']) ? $data['operating_flight_number'] : null;
        $this->container['code_share_flight_numbers'] = isset($data['code_share_flight_numbers']) ? $data['code_share_flight_numbers'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['transit_points'] = isset($data['transit_points']) ? $data['transit_points'] : null;
        $this->container['departure_terminal'] = isset($data['departure_terminal']) ? $data['departure_terminal'] : null;
        $this->container['arrival_terminal'] = isset($data['arrival_terminal']) ? $data['arrival_terminal'] : null;
        $this->container['transit_terminals'] = isset($data['transit_terminals']) ? $data['transit_terminals'] : null;
        $this->container['boarding_policy'] = isset($data['boarding_policy']) ? $data['boarding_policy'] : null;
        $this->container['seat_class_policy'] = isset($data['seat_class_policy']) ? $data['seat_class_policy'] : null;
        $this->container['alerts'] = isset($data['alerts']) ? $data['alerts'] : null;
        $this->container['pass_template_id'] = isset($data['pass_template_id']) ? $data['pass_template_id'] : null;
        $this->container['auto_invalidate_after'] = isset($data['auto_invalidate_after']) ? $data['auto_invalidate_after'] : 2880;
        $this->container['auto_invalidate_cancelled_passes'] = isset($data['auto_invalidate_cancelled_passes']) ? $data['auto_invalidate_cancelled_passes'] : null;
        $this->container['location_messages'] = isset($data['location_messages']) ? $data['location_messages'] : null;
        $this->container['beacon_messages'] = isset($data['beacon_messages']) ? $data['beacon_messages'] : null;
        $this->container['default_links'] = isset($data['default_links']) ? $data['default_links'] : null;
        $this->container['conditional_items'] = isset($data['conditional_items']) ? $data['conditional_items'] : null;
        $this->container['barcode_additional_data'] = isset($data['barcode_additional_data']) ? $data['barcode_additional_data'] : null;
        $this->container['invalidate_cancelled_passes'] = isset($data['invalidate_cancelled_passes']) ? $data['invalidate_cancelled_passes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier_code'] === null) {
            $invalidProperties[] = "'carrier_code' can't be null";
        }
        if ($this->container['flight_number'] === null) {
            $invalidProperties[] = "'flight_number' can't be null";
        }
        if ($this->container['revision'] === null) {
            $invalidProperties[] = "'revision' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['pass_template_id'] === null) {
            $invalidProperties[] = "'pass_template_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets flight_number
     *
     * @return string
     */
    public function getFlightNumber()
    {
        return $this->container['flight_number'];
    }

    /**
     * Sets flight_number
     *
     * @param string $flight_number The flight number.  Note this number must match the carrier code.
     *
     * @return $this
     */
    public function setFlightNumber($flight_number)
    {
        $this->container['flight_number'] = $flight_number;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \Swagger\Client\Model\IoDate
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \Swagger\Client\Model\IoDate $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Multiple designators can be active at a time. Provide a revision to distinguish between versions.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Setting to false will prevent further flights to be created against this flight number. Will automatically be set to false if a second designator with a validFrom date before the current date and after this designator's validFrom date is found.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Swagger\Client\Model\FlightsFlightSchedule
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Swagger\Client\Model\FlightsFlightSchedule $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets operating_carrier_code
     *
     * @return string
     */
    public function getOperatingCarrierCode()
    {
        return $this->container['operating_carrier_code'];
    }

    /**
     * Sets operating_carrier_code
     *
     * @param string $operating_carrier_code If the flight is operated by a carrier other than the carrierCode supplied, provide the IATA or ICAO carrier code for the operating carrier.  A carrier record must exist.
     *
     * @return $this
     */
    public function setOperatingCarrierCode($operating_carrier_code)
    {
        $this->container['operating_carrier_code'] = $operating_carrier_code;

        return $this;
    }

    /**
     * Gets operating_flight_number
     *
     * @return string
     */
    public function getOperatingFlightNumber()
    {
        return $this->container['operating_flight_number'];
    }

    /**
     * Sets operating_flight_number
     *
     * @param string $operating_flight_number If the flight is operated by a carrier other than the carrierCode supplied, provide the flight number for the operating carrier.
     *
     * @return $this
     */
    public function setOperatingFlightNumber($operating_flight_number)
    {
        $this->container['operating_flight_number'] = $operating_flight_number;

        return $this;
    }

    /**
     * Gets code_share_flight_numbers
     *
     * @return string[]
     */
    public function getCodeShareFlightNumbers()
    {
        return $this->container['code_share_flight_numbers'];
    }

    /**
     * Sets code_share_flight_numbers
     *
     * @param string[] $code_share_flight_numbers If the flight has code shares, then enter the carrier code and flight number. If there is an operating carrier, then do not include this in the list.  Code share carriers will not be validated.
     *
     * @return $this
     */
    public function setCodeShareFlightNumbers($code_share_flight_numbers)
    {
        $this->container['code_share_flight_numbers'] = $code_share_flight_numbers;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin The origin port of the flight. In the case of direct flights with multiple stops, this will represent the port where the route commences.
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination The destination port of the flight. In the case of direct flights with multiple stops, this will represent the final port where the route terminates.
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets transit_points
     *
     * @return string[]
     */
    public function getTransitPoints()
    {
        return $this->container['transit_points'];
    }

    /**
     * Sets transit_points
     *
     * @param string[] $transit_points In the case of multiple stops, an ordered array of transit points, commencing with the first port after the origin and ending with the penultimate port.
     *
     * @return $this
     */
    public function setTransitPoints($transit_points)
    {
        $this->container['transit_points'] = $transit_points;

        return $this;
    }

    /**
     * Gets departure_terminal
     *
     * @return string
     */
    public function getDepartureTerminal()
    {
        return $this->container['departure_terminal'];
    }

    /**
     * Sets departure_terminal
     *
     * @param string $departure_terminal The default terminal that the flight departs from.
     *
     * @return $this
     */
    public function setDepartureTerminal($departure_terminal)
    {
        $this->container['departure_terminal'] = $departure_terminal;

        return $this;
    }

    /**
     * Gets arrival_terminal
     *
     * @return string
     */
    public function getArrivalTerminal()
    {
        return $this->container['arrival_terminal'];
    }

    /**
     * Sets arrival_terminal
     *
     * @param string $arrival_terminal The default terminal of the final destination.
     *
     * @return $this
     */
    public function setArrivalTerminal($arrival_terminal)
    {
        $this->container['arrival_terminal'] = $arrival_terminal;

        return $this;
    }

    /**
     * Gets transit_terminals
     *
     * @return string[]
     */
    public function getTransitTerminals()
    {
        return $this->container['transit_terminals'];
    }

    /**
     * Sets transit_terminals
     *
     * @param string[] $transit_terminals In the case of multiple stops, an ordered array of transit terminals. The length of this array should match the number of transit points.
     *
     * @return $this
     */
    public function setTransitTerminals($transit_terminals)
    {
        $this->container['transit_terminals'] = $transit_terminals;

        return $this;
    }

    /**
     * Gets boarding_policy
     *
     * @return \Swagger\Client\Model\FlightsBoardingPolicy
     */
    public function getBoardingPolicy()
    {
        return $this->container['boarding_policy'];
    }

    /**
     * Sets boarding_policy
     *
     * @param \Swagger\Client\Model\FlightsBoardingPolicy $boarding_policy boarding_policy
     *
     * @return $this
     */
    public function setBoardingPolicy($boarding_policy)
    {
        $this->container['boarding_policy'] = $boarding_policy;

        return $this;
    }

    /**
     * Gets seat_class_policy
     *
     * @return \Swagger\Client\Model\FlightsSeatClassPolicy
     */
    public function getSeatClassPolicy()
    {
        return $this->container['seat_class_policy'];
    }

    /**
     * Sets seat_class_policy
     *
     * @param \Swagger\Client\Model\FlightsSeatClassPolicy $seat_class_policy seat_class_policy
     *
     * @return $this
     */
    public function setSeatClassPolicy($seat_class_policy)
    {
        $this->container['seat_class_policy'] = $seat_class_policy;

        return $this;
    }

    /**
     * Gets alerts
     *
     * @return \Swagger\Client\Model\FlightsFlightAlerts[]
     */
    public function getAlerts()
    {
        return $this->container['alerts'];
    }

    /**
     * Sets alerts
     *
     * @param \Swagger\Client\Model\FlightsFlightAlerts[] $alerts An array of alerts to subscribe to for the flight. Note that additional charges apply.
     *
     * @return $this
     */
    public function setAlerts($alerts)
    {
        $this->container['alerts'] = $alerts;

        return $this;
    }

    /**
     * Gets pass_template_id
     *
     * @return string
     */
    public function getPassTemplateId()
    {
        return $this->container['pass_template_id'];
    }

    /**
     * Sets pass_template_id
     *
     * @param string $pass_template_id The PassKit template id that will be used for boarding passes for this flight. It can be overwritten at the flight level.
     *
     * @return $this
     */
    public function setPassTemplateId($pass_template_id)
    {
        $this->container['pass_template_id'] = $pass_template_id;

        return $this;
    }

    /**
     * Gets auto_invalidate_after
     *
     * @return int
     */
    public function getAutoInvalidateAfter()
    {
        return $this->container['auto_invalidate_after'];
    }

    /**
     * Sets auto_invalidate_after
     *
     * @param int $auto_invalidate_after Minutes after scheduled arrival time to automatically invalidate the pass. Enter a value of 9999999 or greater if the pass should not auto invalidate. Default is 48 hours.
     *
     * @return $this
     */
    public function setAutoInvalidateAfter($auto_invalidate_after)
    {
        $this->container['auto_invalidate_after'] = $auto_invalidate_after;

        return $this;
    }

    /**
     * Gets auto_invalidate_cancelled_passes
     *
     * @return bool
     */
    public function getAutoInvalidateCancelledPasses()
    {
        return $this->container['auto_invalidate_cancelled_passes'];
    }

    /**
     * Sets auto_invalidate_cancelled_passes
     *
     * @param bool $auto_invalidate_cancelled_passes Deprecated: Use InvalidateCancelledPasses.
     *
     * @return $this
     */
    public function setAutoInvalidateCancelledPasses($auto_invalidate_cancelled_passes)
    {
        $this->container['auto_invalidate_cancelled_passes'] = $auto_invalidate_cancelled_passes;

        return $this;
    }

    /**
     * Gets location_messages
     *
     * @return \Swagger\Client\Model\IoGPSLocation[]
     */
    public function getLocationMessages()
    {
        return $this->container['location_messages'];
    }

    /**
     * Sets location_messages
     *
     * @param \Swagger\Client\Model\IoGPSLocation[] $location_messages A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen.
     *
     * @return $this
     */
    public function setLocationMessages($location_messages)
    {
        $this->container['location_messages'] = $location_messages;

        return $this;
    }

    /**
     * Gets beacon_messages
     *
     * @return \Swagger\Client\Model\IoBeacon[]
     */
    public function getBeaconMessages()
    {
        return $this->container['beacon_messages'];
    }

    /**
     * Sets beacon_messages
     *
     * @param \Swagger\Client\Model\IoBeacon[] $beacon_messages A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen.
     *
     * @return $this
     */
    public function setBeaconMessages($beacon_messages)
    {
        $this->container['beacon_messages'] = $beacon_messages;

        return $this;
    }

    /**
     * Gets default_links
     *
     * @return \Swagger\Client\Model\IoLink[]
     */
    public function getDefaultLinks()
    {
        return $this->container['default_links'];
    }

    /**
     * Sets default_links
     *
     * @param \Swagger\Client\Model\IoLink[] $default_links A list of links to be appended to the end of each boarding pass.
     *
     * @return $this
     */
    public function setDefaultLinks($default_links)
    {
        $this->container['default_links'] = $default_links;

        return $this;
    }

    /**
     * Gets conditional_items
     *
     * @return bool
     */
    public function getConditionalItems()
    {
        return $this->container['conditional_items'];
    }

    /**
     * Sets conditional_items
     *
     * @param bool $conditional_items If PassKit are generating barcodes, include conditional items. Default false.
     *
     * @return $this
     */
    public function setConditionalItems($conditional_items)
    {
        $this->container['conditional_items'] = $conditional_items;

        return $this;
    }

    /**
     * Gets barcode_additional_data
     *
     * @return string
     */
    public function getBarcodeAdditionalData()
    {
        return $this->container['barcode_additional_data'];
    }

    /**
     * Sets barcode_additional_data
     *
     * @param string $barcode_additional_data If PassKit are generating barcodes, default airline use data (IATA item 4). This can be overwritten at the flight and boarding pass level.
     *
     * @return $this
     */
    public function setBarcodeAdditionalData($barcode_additional_data)
    {
        $this->container['barcode_additional_data'] = $barcode_additional_data;

        return $this;
    }

    /**
     * Gets invalidate_cancelled_passes
     *
     * @return \Swagger\Client\Model\IoToggle
     */
    public function getInvalidateCancelledPasses()
    {
        return $this->container['invalidate_cancelled_passes'];
    }

    /**
     * Sets invalidate_cancelled_passes
     *
     * @param \Swagger\Client\Model\IoToggle $invalidate_cancelled_passes invalidate_cancelled_passes
     *
     * @return $this
     */
    public function setInvalidateCancelledPasses($invalidate_cancelled_passes)
    {
        $this->container['invalidate_cancelled_passes'] = $invalidate_cancelled_passes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
